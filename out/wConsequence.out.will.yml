&ref_0
format: willfile-1.0.0
about:
  name: wConsequence
  description: >-
    Advanced synchronization mechanism. Asynchronous routines may use
    Consequence to wrap postponed result, what allows classify callback for such
    routines as output, not input, what improves analyzability of a program.
    Consequence may be used to make a queue for mutually exclusive access to a
    resource. Algorithmically speaking Consequence is 2 queues ( FIFO ) and a
    customizable arbitrating algorithm. The first queue contains available
    resources, the second queue includes competitors for this resources. At any
    specific moment, one or another queue may be empty or full. Arbitrating
    algorithm makes resource available for a competitor as soon as possible.
    There are 2 kinds of resource: regular and erroneous. Unlike Promise,
    Consequence is much more customizable and can solve engineering problem
    which Promise cant. But have in mind with great power great responsibility
    comes. Consequence can coexist and interact with a Promise, getting
    fulfillment/rejection of a Promise or fulfilling it. Use Consequence to get
    more flexibility and improve readability of asynchronous aspect of your
    application.
  enabled: 1
  version: 0.4.122
  values:
    enabled: 1
    name: wConsequence
    interpreters:
      - nodejs >= 6.0.0
      - chrome >= 60.0.0
      - firefox >= 60.0.0
    keywords:
      - wTools
path:
  module.willfiles: *ref_0
  module.original.willfiles: *ref_0
  module.dir: *ref_0
  local: *ref_0
  remote: *ref_0
  in: *ref_0
  temp: *ref_0
  out: *ref_0
  out.debug: *ref_0
  out.release: *ref_0
  proto: *ref_0
  repository: *ref_0
  bugs: *ref_0
  exported.dir.proto.export: *ref_0
  exported.files.proto.export: *ref_0
criterion:
  default: 1
  debug: 1
  raw: 1
  proto: 1
  export: 1
  tar: 1
  public: 1
submodule: {}
src:
  filePath: 'path::exported.files.proto.export'
  basePath: .
  prefixPath: 'path::exported.dir.proto.export'
mandatory: 1
inherit:
  - module.export
recursive: 0
reflector:
  reflect.proto.: *ref_0
  reflect.proto.debug: *ref_0
  reflect.submodules: *ref_0
  exported.proto.export: *ref_0
  exported.files.proto.export: *ref_0
opts:
  export: 'path::proto'
  tar: 0
step:
  clean.out.: *ref_0
  clean.out.debug: *ref_0
  reflect.proto.: *ref_0
  reflect.proto.debug: *ref_0
  reflect.proto.raw: *ref_0
  reflect.proto.debug.raw: *ref_0
  reflect.submodules.: *ref_0
  reflect.submodules.raw: *ref_0
  reflect.submodules: *ref_0
  export.proto: *ref_0
steps:
  - 'build::debug.raw'
  - 'step::export.proto'
build:
  debug.raw: *ref_0
  debug.compiled: *ref_0
  release.raw: *ref_0
  release.compiled: *ref_0
  all: *ref_0
  proto.export: *ref_0
version: 0.4.122
exportedReflector: 'reflector::exported.proto.export'
exportedFilesReflector: 'reflector::exported.files.proto.export'
exportedDirPath: 'path::exported.dir.proto.export'
exportedFilesPath: 'path::exported.files.proto.export'
exported:
  proto.export: *ref_0
module:
  wConsequence.out: root
